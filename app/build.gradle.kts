/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/9.1.0/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    application
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // JUnit 5 (API + engine “bom” style)
    testImplementation(libs.junit.jupiter)
    // Parameterized tests: @ParameterizedTest, @CsvSource, etc.
    testImplementation(libs.junit.jupiter.params)

    // handy for IDE/debug runners
    testRuntimeOnly(libs.junit.platform.launcher)

    // App deps
    implementation(libs.guava)
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = "com.pacman.ui.Main"
}

// Set the version for the app module so the jar name includes it
version = "1.0.2"

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

// Make a runnable jar in app/build/libs/ with resources packaged
tasks.jar {
    // Name like pacman-1.0.1.jar instead of app-1.0.1.jar
    archiveBaseName.set("pacman")
    archiveVersion.set(project.version.toString())

    // Ensure double-click / `java -jar` works
    manifest {
        attributes["Main-Class"] = application.mainClass.get()
    }

    // Include resources (tiles, maps, etc.) inside the jar
    from(sourceSets.main.get().resources)
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
